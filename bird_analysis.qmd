---
title: "bird_analysis"
editor: visual
---

```{r}
library(auk)
library(ggplot2)
library(dplyr)
library(lubridate)
library(scales)
```




```{r}
jan2024 <- read_ebd("2024jan.txt")
jan2024$observation_count[jan2024$observation_count == "X"] <- 1

# Convert the column to numeric
jan2024$observation_count <- as.numeric(jan2024$observation_count)

```



```{r,fig.width =15}

# Summarize the data: calculate the total observation_count for each common_name
bird_count_summary <- jan2024 |>
  group_by(common_name) |>
  summarize(total_count = sum(observation_count, na.rm = TRUE)) 

# Create the bar graph
ggplot(bird_count_summary, aes(x = reorder(common_name, -total_count), y = total_count)) +
  geom_bar(stat = "identity",fill = "deepskyblue") +
  labs(
    title = "Total Observations by Bird Species",
    x = "Bird Species (Common Name)",
    y = "Total Observation Count"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability


```




Analyze the number of rock pigeons in NYC in the past 10 years

```{r}
rockpigeon <-read_ebd("rockpigeon.txt")
rockpigeon$year = lubridate::year(rockpigeon$observation_date) # extract years
```




```{r}
# convert X in observation count to 1, meaning species observed
rockpigeon$observation_count[rockpigeon$observation_count == "X"] <- 1

# Convert the column to numeric
rockpigeon$observation_count <- as.numeric(rockpigeon$observation_count)
```



```{r}
# Summarize the data: calculate the total observation_count for each common_name
pigeon_count_summary <- rockpigeon |>
  group_by(year) |>
  summarize(total_count = sum(observation_count, na.rm = TRUE)) 

# Create the bar graph
ggplot(pigeon_count_summary, aes(x = factor(year, levels = sort(unique(year))), y = total_count)) +
  geom_bar(stat = "identity",fill = "deepskyblue") +
  labs(
    title = "Total Observations by Bird Species",
    x = "Rock Pigeons",
    y = "Total Observation Count"
  ) +
  theme_minimal() +
  scale_y_continuous(label=comma)
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability

```

```{r}
library(ggplot2)
library(maps)
library(dplyr)

# Get NYC counties map data using the 'maps' package
nyc_counties <- map_data("county") %>%
  filter(region == "new york" & subregion == "new york")

# Scatter observations slightly using jitter
rockpigeon_jittered <- rockpigeon %>%
  mutate(
    jittered_latitude = jitter(latitude, amount = 0.002),
    jittered_longitude = jitter(longitude, amount = 0.002)
  )

# Plot NYC counties and overlay observations
ggplot() +
  geom_polygon(
    data = nyc_counties,
    aes(x = long, y = lat, group = group),
    fill = "lightgrey",
    color = "black"
  ) +
  geom_point(
    data = rockpigeon_jittered,
    aes(x = longitude, y = latitude),
    color = "deepskyblue",
    alpha = 0.1,
    size = 1.5
  ) +
  labs(
    title = "Rock Pigeon Observations in NYC (2019-2024)",
    x = "Longitude",
    y = "Latitude"
  ) +
  theme_minimal() +
  coord_fixed(1.3)  # Fix aspect ratio

```

```{r}
library(leaflet)
library(dplyr)


# Filter for 2019 observations and jitter the latitude/longitude
rockpigeon_jittered <- rockpigeon %>%
  filter(year == 2019) %>%
  mutate(
    jittered_latitude = jitter(latitude, amount = 0.002),
    jittered_longitude = jitter(longitude, amount = 0.002),
    alpha = case_when(
      observation_count > 30 ~ 0.8,
      observation_count >= 15 & observation_count <= 30 ~ 0.5,
      observation_count < 10 ~ 0.2
    )
  )

# Create a leaflet map
leaflet(data = rockpigeon_jittered) %>%
  addTiles() %>%  # Add a base map layer
  addCircleMarkers(
    lng = ~jittered_longitude,
    lat = ~jittered_latitude,
    radius = 3,  # Adjust the size of the points
    color = "deepskyblue",  # Use the dynamic color column
    fillOpacity = 0.2,  # Adjust transparency
    popup = ~paste0(
      "Year: ", year,
      "<br>Observation Count: ", observation_count,
      "<br>Latitude: ", latitude,
      "<br>Longitude: ", longitude
    )  # Add popup info
  ) %>%
  addLegend(
    position = "bottomright",
    colors = "deepskyblue",
    label = "Observation",
    title = "Pigeon Observation in 2019"
  )

```




```{r}

# Filter for 2024 observations and jitter the latitude/longitude
rockpigeon_jittered <- rockpigeon %>%
  filter(year == 2024) %>%
  mutate(
    jittered_latitude = jitter(latitude, amount = 0.002),
    jittered_longitude = jitter(longitude, amount = 0.002),
    alpha = case_when(
      observation_count > 30 ~ 0.8,
      observation_count >= 15 & observation_count <= 30 ~ 0.5,
      observation_count < 10 ~ 0.2
    )
  )

# Create a leaflet map
leaflet(data = rockpigeon_jittered) %>%
  addTiles() %>%  # Add a base map layer
  addCircleMarkers(
    lng = ~jittered_longitude,
    lat = ~jittered_latitude,
    radius = 3,  # Adjust the size of the points
    color = "deepskyblue",  # Use the dynamic color column
    fillOpacity = 0.2,  # Adjust transparency
    popup = ~paste0(
      "Year: ", year,
      "<br>Observation Count: ", observation_count,
      "<br>Latitude: ", latitude,
      "<br>Longitude: ", longitude
    )  # Add popup info
  ) %>%
  addLegend(
    position = "bottomright",
    colors = "deepskyblue",
    label = "Observation",
    title = "Pigeon Observation in 2024"
  )

```




Junk code




# ```{r}
# # sample data
# f <- "C:/Users/User/Documents/The_Birds_Story/2024jan.txt"
# # define an EBD reference and a set of filters
# ebd <- auk_ebd(f) |> 
#   # species: common and scientific names can be mixed
#   auk_species(species = "American Black Duck") |>
#   auk_complete()
# ebd
# ```



```{r}
df <- read.table("2024jan.txt", header = TRUE, sep = "\t", fill = TRUE, stringsAsFactors = FALSE)

```

